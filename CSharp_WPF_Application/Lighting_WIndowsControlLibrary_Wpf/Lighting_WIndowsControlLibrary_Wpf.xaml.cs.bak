using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Runtime.CompilerServices;
using Microsoft.VisualBasic;
using System.Diagnostics;
using System.IO.Ports;
using Microsoft.VisualBasic.CompilerServices;
using System.Threading;
using LOGRECORDER;
using Config_sharp;


namespace Lighting_WindowsControlLibrary_Wpf
{
    /// <summary>
    /// Interaction logic for UserControl1.xaml
    /// </summary>
    public partial class Lighting_WindowsControl_Wpf : UserControl
    {
        // Log Recorder Variables
        // ---------------------------------------------------------------
        public InfoMgr LogWritter;
        private string m_LogFileNameHeader = "LightingControl";
        // ---------------------------------------------------------------


        // Configuation Variables
        // ---------------------------------------------------------------
        private CustomConfig_Lighting Config;
        private string RecipeDirectionPath = "./Config/";
        private string RecipeFilename = "LightingControl_";
        private string RecipeSubtitle = ".dat";
        private string RecipeFullPath;
        // ---------------------------------------------------------------

        public Lighting_WindowsControl_Wpf()
        {
            InitializeComponent();
        }

        private SerialPort _m_Rs232;
        private Stopwatch m_SpendTime;
        private string[] m_PortNames;
        private static int m_offsets = 5;
        private static int m_MaxValue = 100;
        private static int m_MinValue = 0;
        private static int m_BaseValue = 450;
        private static int m_IntervalValue = 4096 - m_BaseValue;

        // =========接收字元的POOL===============
        public delegate void DataReceivedEventHandler();
        public event DataReceivedEventHandler DataReceived;

        private string m_bufferStr;
        private string m_finalStr;

        private int _SelectedIndex;
        private string _SelectedPort;

        // Public Sub New()
        // Me.m_Rs232 = New SerialPort
        // Me.m_SpendTime = New Stopwatch

        // m_bufferStr = ""
        // End Sub
        private SerialPort m_Rs232
        {
            [MethodImpl(MethodImplOptions.Synchronized)]
            get
            {
                return _m_Rs232;
            }

            [MethodImpl(MethodImplOptions.Synchronized)]
            set
            {
                if (_m_Rs232 != null)
                {
                    _m_Rs232.DataReceived -= RS232_DataReceived;
                }

                _m_Rs232 = value;
                if (_m_Rs232 != null)
                {
                    _m_Rs232.DataReceived += RS232_DataReceived;
                }
            }
        }

        public string[] GetPortNames
        {
            get
            {
                m_PortNames = SerialPort.GetPortNames();
                return m_PortNames;
            }
        }

        public string BufferStr
        {
            get
            {
                string BufferStrRet = default;
                BufferStrRet = m_bufferStr;
                return BufferStrRet;
            }
        }

        public string FinalStr
        {
            get
            {
                string FinalStrRet = default;
                FinalStrRet = m_finalStr;
                return FinalStrRet;
            }
        }

        public int m_CH1_Value;
        public int m_CH2_Value;
        public int m_CH3_Value;

        public int CH1_Value
        {
            set
            {
                // Check and set CH value is between 0 ~ 100
                m_CH1_Value = (value < m_MinValue) ? 0 : (value > m_MaxValue ? m_MaxValue : value);

                this.SliderCH1.Value = m_CH1_Value;
                this.TextBoxValue_CH1.Text = m_CH1_Value.ToString();

                if (m_Rs232 is object)
                {
                    SWR(1, m_CH1_Value);
                }
            }

            get
            {
                return m_CH1_Value;
            }
        }

        public int CH2_Value
        {
            set
            {
                // Check and set CH value is between 0 ~ 100
                m_CH2_Value = (value < m_MinValue) ? 0 : (value > m_MaxValue ? m_MaxValue : value);
                SliderCH2.Value = m_CH2_Value;
                this.TextBoxValue_CH2.Text = m_CH2_Value.ToString();

                if (m_Rs232 is object)
                {
                    SWR(2, m_CH2_Value);
                }
            }

            get
            {
                return m_CH2_Value;
            }
        }

        public int CH3_Value
        {
            set
            {
                // Check and set CH value is between 0 ~ 100
                m_CH3_Value = (value < m_MinValue) ? 0 : (value > m_MaxValue ? m_MaxValue : value);
                this.SliderCH3.Value = m_CH3_Value;
                this.TextBoxValue_CH3.Text = m_CH3_Value.ToString();

                if (m_Rs232 is object)
                {
                    SWR(3, m_CH3_Value);
                }
            }

            get
            {
                return m_CH3_Value;
            }
        }

        private void FindDevice()
        {
            // Get a list of serial port names.
            string[] ports = SerialPort.GetPortNames();

            // Display each port name to the console.
            foreach (string port in ports)
            {
                ComboBoxItem item = new ComboBoxItem();

                item.Content = port.ToString();

                ComPortList.Items.Add(item);
            }
        }

        public int SelectedIndex { get => _SelectedIndex; }

        public string SelectedPort { get => _SelectedPort; }

        public void Init(string serialPort, string deviceName)
        {
            try
            { 
                SetPort(serialPort);

                SetDeviceName(deviceName);

                CH1_Value = 0;
                CH2_Value = 0;
                CH3_Value = 0;



                Config_Init();

                LogFile_Initialization();
            }
            catch (Exception ex)
            {
                //LogWritter.MsgError("Initialized Error. Message: " + ex.Message);
                Console.WriteLine("Initialized Error. Message: " + ex.Message);
                throw;
            }

            LogWritter.MsgGenLog("Initialized Successfully.");
        }


        public void Config_Init()
        {
            // Append "RecipeFilename" to "DeviceName"
            RecipeFilename += DeviceName.Content;

            RecipeFullPath = RecipeDirectionPath + RecipeFilename + RecipeSubtitle;

            Config = new CustomConfig_Lighting(RecipeFullPath);

        }


        public void LogFile_Initialization()
        {
            string path = "./" + m_LogFileNameHeader + DeviceName.Content;

            LogFile_Initialization(path);
        }

        public void LogFile_Initialization(string path)
        {
            string GenLog, WarningLog, ErrLog, DebugLog;

            try
            {
                GenLog = path + "/GeneralLog";
                WarningLog = path + "/WarningLog";
                ErrLog = path + "/ErrorLog";
                DebugLog = path + "/DebugLog";

                LogWritter = new InfoMgr(GenLog, WarningLog, ErrLog, DebugLog);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Log檔無法記錄資訊! Message:" + ex.Message);
            };
        }


        public void SetPort(string port)
        {
            try
            {
                if (m_Rs232 != null)
                {
                    if (m_Rs232.IsOpen)
                    {
                        Close();
                    }
                }

                _SelectedPort = port;
                Label_ComPort.Content = port;

                Open();
            }
            catch (Exception ex)
            {
                LogWritter.MsgError("SetPort Error. Message: " + ex.Message);
            }
        }

        public void SetDeviceName(string name)
        {
            try
            {
                this.DeviceName.Content = name;
            }
            catch (Exception ex)
            {
                LogWritter.MsgError("SetDeviceName Error. Message: " + ex.Message);
            }
        }

        public bool Open()
        {
            return Open(SelectedPort);
        }
        public bool Open(string port)
        {
            try
            {
                m_Rs232 = new SerialPort();
                m_SpendTime = new Stopwatch();
                m_bufferStr = "";
                this.StatusIcon.Fill = Brushes.Red;

                if (m_Rs232.IsOpen)
                {
                    m_Rs232.Close();
                }

                // Me.TextBox_ComPort.Text = port

                m_Rs232.PortName = port;
                m_Rs232.BaudRate = 57600;
                m_Rs232.Parity = Parity.None;
                m_Rs232.DataBits = 8;
                m_Rs232.StopBits = StopBits.One;
                m_Rs232.RtsEnable = false;
                m_Rs232.DtrEnable = false;
                m_Rs232.Open();

                this.StatusIcon.Fill = Brushes.Green;
                this.ValueSettingGroup.IsEnabled = true;

                return true;
            }
            catch (Exception ex) when (m_Rs232.IsOpen == false)
            {
                this.StatusIcon.Fill = Brushes.Red;
                LogWritter.MsgError("Lighting Opening Error. Message: " + ex.Message);
                return false;
            }
        }

        public bool Close()
        {
            if (m_Rs232 is object == false) return false;

            try
            {
                if (m_Rs232.IsOpen)
                {
                    this.StatusIcon.Fill = Brushes.Red;
                    this.ValueSettingGroup.IsEnabled = false;
                    m_Rs232.Close();
                }

                return true;
            }
            catch (Exception ex)
            {
                LogWritter.MsgError("Lighting Closing Error. Message: " + ex.Message);
                return false;
            }
        }

        private void SWR(int ch, int light_val)
        {
            int val = -1;

            try
            {
                // Convert percent to value
                //float valRatio = (light_val - 11) / (float)(100-11);
                light_val = Convert.ToInt32(m_BaseValue + m_IntervalValue * light_val * 0.01 - 1);

                light_val = light_val < 0 ? 0 : light_val > 4095 ? 4095 : light_val;

                // ch: 1~4 , light_val 0~4095
                
                val = 10000 * ch + light_val;
                DataTransmit_ByString("SWR" + val.ToString() + Constants.vbCrLf);
            }
            catch (Exception ex)
            {
                MessageBox.Show("光源設定異常!");
                LogWritter.MsgError("Lighting Set Value Error. Message: " + ex.Message);

                LogWritter.MsgDebug("---------------------------------------------");
                LogWritter.MsgDebug("Lighting Set Value Variables /n");
                LogWritter.MsgDebug("---------------------------------------------");
                LogWritter.MsgDebug("Channel: " + ch.ToString() + "/n");
                LogWritter.MsgDebug("Value: " + light_val.ToString() + "/n");
                LogWritter.MsgDebug("Value Sent: " + val.ToString() + "/n");
                LogWritter.MsgDebug("---------------------------------------------");
            }
        }

        private void DataTransmit_ByString(string str)
        {
            m_Rs232.DiscardInBuffer();                        // Clear input buffer
            m_Rs232.Write(str); // & Chr(13)) ' 送出Request
        }

        private void RS232_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            if (e.EventType != SerialData.Chars)
                return;

            string inDataStr = m_Rs232.ReadExisting();

            m_bufferStr += inDataStr;

            // ==============等換行符號=== Chr(13) VbCr
            if (inDataStr.Contains(Conversions.ToString((char)13)))
            {
                var a = m_bufferStr.Split((char)13);
                m_finalStr = a[0];
                m_bufferStr = "";  // 清空
                DataReceived?.Invoke();
            }
        }

        private void SliderCH1_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            //CH1_Value = Convert.ToInt32(SliderCH1.Value);
            CH1_Value = Convert.ToInt32((sender as Slider).Value);

            if (m_Rs232 is object)
            {
                SWR(1, CH1_Value);
            }
        }

        private void SliderCH2_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            //CH2_Value = Convert.ToInt32(SliderCH2.Value);
            CH2_Value = Convert.ToInt32((sender as Slider).Value);

            if (m_Rs232 is object)
            {
                SWR(2, CH2_Value);
            }
        }

        private void SliderCH3_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            //CH3_Value = Convert.ToInt32(SliderCH3.Value);
            CH3_Value = Convert.ToInt32((sender as Slider).Value);

            if (m_Rs232 is object)
            {
                SWR(3, CH3_Value);
            }
        }

        private void TextBoxValue_CH1_TextChanged(object sender, TextChangedEventArgs e)
        {
            //CH1_Value = Convert.ToInt32(TextBoxValue_CH1.Text);
            CH1_Value = Convert.ToInt32((sender as TextBox).Text);

            if (m_Rs232 is object)
            {
                SWR(1, CH1_Value);
            }
            Thread.Sleep(10);
        }

        private void TextBoxValue_CH2_TextChanged(object sender, TextChangedEventArgs e)
        {
            //CH2_Value = Convert.ToInt32(TextBoxValue_CH2.Text);
            CH2_Value = Convert.ToInt32((sender as TextBox).Text);

            if (m_Rs232 is object)
            {
                SWR(2, CH2_Value);
            }
        }

        private void TextBoxValue_CH3_TextChanged(object sender, TextChangedEventArgs e)
        {
            //CH3_Value = Convert.ToInt32(TextBoxValue_CH3.Text);
            CH3_Value = Convert.ToInt32((sender as TextBox).Text);

            if (m_Rs232 is object)
            {
                SWR(3, CH3_Value);
            }
        }

        private void ButtonUp_CH1_Click(object sender, RoutedEventArgs e)
        {
            CH1_Value += m_offsets;
        }

        private void ButtonDown_CH1_Click(object sender, RoutedEventArgs e)
        {
            CH1_Value -= m_offsets;
        }

        private void ButtonUp_CH2_Click(object sender, RoutedEventArgs e)
        {
            CH2_Value += m_offsets;
        }

        private void ButtonDown_CH2_Click(object sender, RoutedEventArgs e)
        {
            CH2_Value -= m_offsets;
        }

        private void ButtonUp_CH3_Click(object sender, RoutedEventArgs e)
        {
            CH3_Value += m_offsets;
        }

        private void ButtonDown_CH3_Click(object sender, RoutedEventArgs e)
        {
            CH3_Value -= m_offsets;
        }


        private void ComPortList_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Close();

            _SelectedIndex = ComPortList.SelectedIndex;

            _SelectedPort = (ComPortList.SelectedItem.ToString().Split(' '))[1];

            Open();
        }

        private void ButtonLoad_Click(object sender, RoutedEventArgs e)
        {
            Config.Load();

            CH1_Value = Convert.ToInt32(Config.parameters.CH1_Value);
            CH2_Value = Convert.ToInt32(Config.parameters.CH2_Value);
            CH3_Value = Convert.ToInt32(Config.parameters.CH3_Value);
        }

        private void ButtonSave_Click(object sender, RoutedEventArgs e)
        {
            Config.parameters.CH1_Value = CH1_Value;
            Config.parameters.CH2_Value = CH2_Value;
            Config.parameters.CH3_Value = CH3_Value;

            Config.Save();
        }

        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
        // Public Sub DataTransmit_ByByte(ByVal str As String)
        // Dim transmitString As String
        // transmitString = str '& Chr(13)

        // Dim aa(transmitString.Length) As Byte
        // aa = StrToByteArray(transmitString)

        // Me.m_Rs232.DiscardInBuffer()                        ' Clear input buffer
        // Me.m_Rs232.Write(aa, 0, aa.GetLength(0)) ' 送出Request
        // End Sub

        // Public Sub DataTransmit_HexStrByByte(ByVal str As String)
        // Dim transmitString As String
        // transmitString = str '& Chr(13)

        // Dim aa(CInt(transmitString.Length / 2) - 1) As Byte
        // aa = HexStr2ByteArray(transmitString)

        // Me.m_Rs232.DiscardInBuffer()                        ' Clear input buffer
        // Me.m_Rs232.Write(aa, 0, aa.GetLength(0)) ' 送出Request
        // End Sub

        // ' 將字串轉成byte陣列
        // Private Function StrToByteArray(ByVal str As String) As Byte()
        // Dim encoding As New System.Text.ASCIIEncoding()
        // Return encoding.GetBytes(str)
        // End Function
        // Private Function FormatTrans(ByVal input As Double) As String
        // Dim TransString As String
        // TransString = String.Format("{0:000.000}", input)
        // Return TransString
        // End Function
        // ' 將Hex字串轉成byte陣列
        // Public Function HexStr2ByteArray(ByVal str As String) As Byte()
        // Dim sendData As Byte() = New Byte(CInt(str.Length / 2) - 1) {}
        // For i As Integer = 0 To (sendData.Length - 1)
        // sendData(i) = CByte(Convert.ToInt32(str.Substring(i * 2, 2), 16))
        // Next i
        // Return sendData
        // End Function
    }
}

